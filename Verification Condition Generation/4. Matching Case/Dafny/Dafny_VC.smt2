(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Operator () T@U)
(declare-fun |##_module.Operator.Add| () T@U)
(declare-fun |##_module.Operator.Minus| () T@U)
(declare-fun |##_module.Operator.Multiply| () T@U)
(declare-fun tytagFamily$Operator () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Matching (Int T@U) Int)
(declare-fun |_module.__default.Matching#canCall| (Int T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Operator () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun _module.Operator.Add_q (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _module.Operator.Minus_q (T@U) Bool)
(declare-fun _module.Operator.Multiply_q (T@U) Bool)
(declare-fun |#_module.Operator.Add| (Int) T@U)
(declare-fun |#_module.Operator.Minus| (Int) T@U)
(declare-fun |#_module.Operator.Multiply| (Int) T@U)
(declare-fun _module.Operator._h0 (T@U) Int)
(declare-fun _module.Operator._h1 (T@U) Int)
(declare-fun _module.Operator._h2 (T@U) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType2Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Type (T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._module.Operator |##_module.Operator.Add| |##_module.Operator.Minus| |##_module.Operator.Multiply| tytagFamily$Operator)
)
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0| Int) (|op#0| T@U) ) (!  (=> (or (|_module.__default.Matching#canCall| |x#0| |op#0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |op#0| Tclass._module.Operator))) true)
 :pattern ( (_module.__default.Matching |x#0| |op#0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((d T@U) ) (! (= (_module.Operator.Add_q d) (= (DatatypeCtorId d) |##_module.Operator.Add|))
 :pattern ( (_module.Operator.Add_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Operator.Minus_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Operator.Minus|))
 :pattern ( (_module.Operator.Minus_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Operator.Multiply_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Operator.Multiply|))
 :pattern ( (_module.Operator.Multiply_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (_module.Operator.Add_q d@@2) (exists ((|a#1#0#0| Int) ) (= d@@2 (|#_module.Operator.Add| |a#1#0#0|))))
 :pattern ( (_module.Operator.Add_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_module.Operator.Minus_q d@@3) (exists ((|a#6#0#0| Int) ) (= d@@3 (|#_module.Operator.Minus| |a#6#0#0|))))
 :pattern ( (_module.Operator.Minus_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Operator.Multiply_q d@@4) (exists ((|a#11#0#0| Int) ) (= d@@4 (|#_module.Operator.Multiply| |a#11#0#0|))))
 :pattern ( (_module.Operator.Multiply_q d@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0@@0| Int) (|op#0@@0| T@U) ) (!  (=> (or (|_module.__default.Matching#canCall| |x#0@@0| |op#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |op#0@@0| Tclass._module.Operator))) (= (_module.__default.Matching |x#0@@0| |op#0@@0|) (ite (_module.Operator.Add_q |op#0@@0|) (let ((|a#0| (_module.Operator._h0 |op#0@@0|)))
(+ |x#0@@0| |a#0|)) (ite (_module.Operator.Minus_q |op#0@@0|) (let ((|a#1| (_module.Operator._h1 |op#0@@0|)))
(- |x#0@@0| |a#1|)) (let ((|a#2| (_module.Operator._h2 |op#0@@0|)))
(Mul |x#0@@0| |a#2|))))))
 :pattern ( (_module.__default.Matching |x#0@@0| |op#0@@0|))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (and (forall ((u0 T@T) (u1 T@T) (s0 T@T) (t0@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= s0 t0@@0) (= (MapType0Select t0@@0 u0 u1 (MapType0Store s0 u0 u1 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select t0@@0 u0 u1 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (s0@@0 T@T) (t0@@1 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x0@@1 y0@@0) (= (MapType0Select t0@@1 u0@@0 u1@@0 (MapType0Store s0@@0 u0@@0 u1@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select t0@@1 u0@@0 u1@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (s0@@1 T@T) (t0@@2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@2 T@U) (y0@@1 T@U) (y1@@1 T@U) ) (!  (or (= x1@@2 y1@@1) (= (MapType0Select t0@@2 u0@@1 u1@@1 (MapType0Store s0@@1 u0@@1 u1@@1 m@@2 x0@@2 x1@@2 val@@2) y0@@1 y1@@1) (MapType0Select t0@@2 u0@@1 u1@@1 m@@2 y0@@1 y1@@1)))
 :weight 0
)))) (= (Ctor refType) 4)) (forall ((t0@@3 T@T) (t1@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 (MapType1Store t0@@3 t1@@0 m@@3 x0@@3 val@@3) x0@@3) val@@3)
 :weight 0
))) (and (forall ((u0@@2 T@T) (s0@@2 T@T) (t0@@4 T@T) (val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or (= s0@@2 t0@@4) (= (MapType1Select t0@@4 u0@@2 (MapType1Store s0@@2 u0@@2 m@@4 x0@@4 val@@4) y0@@2) (MapType1Select t0@@4 u0@@2 m@@4 y0@@2)))
 :weight 0
)) (forall ((u0@@3 T@T) (s0@@3 T@T) (t0@@5 T@T) (val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (y0@@3 T@U) ) (!  (or (= x0@@5 y0@@3) (= (MapType1Select t0@@5 u0@@3 (MapType1Store s0@@3 u0@@3 m@@5 x0@@5 val@@5) y0@@3) (MapType1Select t0@@5 u0@@3 m@@5 y0@@3)))
 :weight 0
)))) (= (Ctor BoxType) 5)) (forall ((t0@@6 T@T) (t1@@1 T@T) (val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) ) (! (= (MapType2Select t0@@6 t1@@1 (MapType2Store t0@@6 t1@@1 m@@6 x0@@6 val@@6) x0@@6) val@@6)
 :weight 0
))) (forall ((u0@@4 T@T) (u1@@2 T@T) (val@@7 T@U) (m@@7 T@U) (x0@@7 T@U) (y0@@4 T@U) ) (!  (or (= x0@@7 y0@@4) (= (MapType2Select u0@@4 u1@@2 (MapType2Store u0@@4 u1@@2 m@@7 x0@@7 val@@7) y0@@4) (MapType2Select u0@@4 u1@@2 m@@7 y0@@4)))
 :weight 0
))) (forall ((arg0@@2 T@T) ) (= (Ctor (MapType1Type arg0@@2)) 6))) (forall ((arg0@@3 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) (alpha T@T) ) (! (= (U_2_bool (MapType0Select alpha refType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select boolType BoxType (MapType2Select refType (MapType1Type BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select alpha refType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|a#0#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.Operator.Add| |a#0#0#0|)) |##_module.Operator.Add|)
 :pattern ( (|#_module.Operator.Add| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| Int) ) (! (= (_module.Operator._h0 (|#_module.Operator.Add| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#_module.Operator.Add| |a#4#0#0|))
)))
(assert (forall ((|a#5#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.Operator.Minus| |a#5#0#0|)) |##_module.Operator.Minus|)
 :pattern ( (|#_module.Operator.Minus| |a#5#0#0|))
)))
(assert (forall ((|a#9#0#0| Int) ) (! (= (_module.Operator._h1 (|#_module.Operator.Minus| |a#9#0#0|)) |a#9#0#0|)
 :pattern ( (|#_module.Operator.Minus| |a#9#0#0|))
)))
(assert (forall ((|a#10#0#0| Int) ) (! (= (DatatypeCtorId (|#_module.Operator.Multiply| |a#10#0#0|)) |##_module.Operator.Multiply|)
 :pattern ( (|#_module.Operator.Multiply| |a#10#0#0|))
)))
(assert (forall ((|a#14#0#0| Int) ) (! (= (_module.Operator._h2 (|#_module.Operator.Multiply| |a#14#0#0|)) |a#14#0#0|)
 :pattern ( (|#_module.Operator.Multiply| |a#14#0#0|))
)))
(assert (forall ((|a#2#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.Operator.Add| |a#2#0#0|) Tclass._module.Operator) ($Is intType (int_2_U |a#2#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.Operator.Add| |a#2#0#0|) Tclass._module.Operator))
)))
(assert (forall ((|a#7#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.Operator.Minus| |a#7#0#0|) Tclass._module.Operator) ($Is intType (int_2_U |a#7#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.Operator.Minus| |a#7#0#0|) Tclass._module.Operator))
)))
(assert (forall ((|a#12#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#_module.Operator.Multiply| |a#12#0#0|) Tclass._module.Operator) ($Is intType (int_2_U |a#12#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.Operator.Multiply| |a#12#0#0|) Tclass._module.Operator))
)))
(assert (forall ((d@@5 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (_module.Operator.Add_q d@@5) ($IsAlloc DatatypeTypeType d@@5 Tclass._module.Operator $h))) ($IsAlloc intType (int_2_U (_module.Operator._h0 d@@5)) TInt $h))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Operator._h0 d@@5)) TInt $h))
)))
(assert (forall ((d@@6 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (_module.Operator.Minus_q d@@6) ($IsAlloc DatatypeTypeType d@@6 Tclass._module.Operator $h@@0))) ($IsAlloc intType (int_2_U (_module.Operator._h1 d@@6)) TInt $h@@0))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Operator._h1 d@@6)) TInt $h@@0))
)))
(assert (forall ((d@@7 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (_module.Operator.Multiply_q d@@7) ($IsAlloc DatatypeTypeType d@@7 Tclass._module.Operator $h@@1))) ($IsAlloc intType (int_2_U (_module.Operator._h2 d@@7)) TInt $h@@1))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Operator._h2 d@@7)) TInt $h@@1))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 Tclass._module.Operator) (or (or (_module.Operator.Add_q d@@8) (_module.Operator.Minus_q d@@8)) (_module.Operator.Multiply_q d@@8)))
 :pattern ( (_module.Operator.Multiply_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.Operator))
 :pattern ( (_module.Operator.Minus_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.Operator))
 :pattern ( (_module.Operator.Add_q d@@8) ($Is DatatypeTypeType d@@8 Tclass._module.Operator))
)))
(assert (forall ((x@@4 Int) (y Int) ) (! (= (Mul x@@4 y) (* x@@4 y))
 :pattern ( (Mul x@@4 y))
)))
(assert (forall ((d@@9 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) ($Is DatatypeTypeType d@@9 Tclass._module.Operator)) ($IsAlloc DatatypeTypeType d@@9 Tclass._module.Operator $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 Tclass._module.Operator $h@@2))
)))
(assert (= (Tag Tclass._module.Operator) Tagclass._module.Operator))
(assert (= (TagFamily Tclass._module.Operator) tytagFamily$Operator))
(assert (forall ((|a#3#0#0| Int) ) (! (= (|#_module.Operator.Add| (LitInt |a#3#0#0|)) (Lit DatatypeTypeType (|#_module.Operator.Add| |a#3#0#0|)))
 :pattern ( (|#_module.Operator.Add| (LitInt |a#3#0#0|)))
)))
(assert (forall ((|a#8#0#0| Int) ) (! (= (|#_module.Operator.Minus| (LitInt |a#8#0#0|)) (Lit DatatypeTypeType (|#_module.Operator.Minus| |a#8#0#0|)))
 :pattern ( (|#_module.Operator.Minus| (LitInt |a#8#0#0|)))
)))
(assert (forall ((|a#13#0#0| Int) ) (! (= (|#_module.Operator.Multiply| (LitInt |a#13#0#0|)) (Lit DatatypeTypeType (|#_module.Operator.Multiply| |a#13#0#0|)))
 :pattern ( (|#_module.Operator.Multiply| (LitInt |a#13#0#0|)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|x#0@@1| Int) (|op#0@@1| T@U) ) (!  (=> (or (|_module.__default.Matching#canCall| (LitInt |x#0@@1|) (Lit DatatypeTypeType |op#0@@1|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |op#0@@1| Tclass._module.Operator))) (= (_module.__default.Matching (LitInt |x#0@@1|) (Lit DatatypeTypeType |op#0@@1|)) (ite (_module.Operator.Add_q (Lit DatatypeTypeType |op#0@@1|)) (let ((|a#6| (LitInt (_module.Operator._h0 (Lit DatatypeTypeType |op#0@@1|)))))
(LitInt (+ |x#0@@1| |a#6|))) (ite (_module.Operator.Minus_q (Lit DatatypeTypeType |op#0@@1|)) (let ((|a#7| (LitInt (_module.Operator._h1 (Lit DatatypeTypeType |op#0@@1|)))))
(LitInt (- |x#0@@1| |a#7|))) (let ((|a#8| (LitInt (_module.Operator._h2 (Lit DatatypeTypeType |op#0@@1|)))))
(LitInt (Mul (LitInt |x#0@@1|) |a#8|)))))))
 :weight 3
 :pattern ( (_module.__default.Matching (LitInt |x#0@@1|) (Lit DatatypeTypeType |op#0@@1|)))
))))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc intType v TInt h)
 :pattern ( ($IsAlloc intType v TInt h))
)))
(assert (forall ((v@@0 T@U) ) (! ($Is intType v@@0 TInt)
 :pattern ( ($Is intType v@@0 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |##x#0@0| () Int)
(declare-fun |##op#0@0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 0)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (and (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |##x#0@0| (LitInt 2))) (and ($IsAlloc intType (int_2_U |##x#0@0|) TInt $Heap) (= |##op#0@0| (Lit DatatypeTypeType (|#_module.Operator.Add| (LitInt 3)))))) (and (and ($IsAlloc DatatypeTypeType |##op#0@0| Tclass._module.Operator $Heap) (|_module.__default.Matching#canCall| (LitInt 2) (Lit DatatypeTypeType (|#_module.Operator.Add| (LitInt 3))))) (and (|_module.__default.Matching#canCall| (LitInt 2) (Lit DatatypeTypeType (|#_module.Operator.Add| (LitInt 3)))) (= (ControlFlow 0 2) (- 0 1))))) (= (LitInt (_module.__default.Matching (LitInt 2) (Lit DatatypeTypeType (|#_module.Operator.Add| (LitInt 3))))) (LitInt 5)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 3) 2))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
